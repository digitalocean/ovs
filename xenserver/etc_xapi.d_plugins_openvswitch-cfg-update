#!/usr/bin/env python
#
# xapi plugin script to update the cache of configuration items in the
# ovs-vswitchd configuration that are managed in the xapi database when 
# integrated with Citrix management tools.

# Copyright (C) 2009, 2010, 2011 Nicira Networks, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at:
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# TBD: - error handling needs to be improved.  Currently this can leave
# TBD:   the system in a bad state if anything goes wrong.

import XenAPIPlugin
import XenAPI
import os
import subprocess
import syslog

vsctl="/usr/bin/ovs-vsctl"
cacert_filename="/etc/openvswitch/vswitchd.cacert"

# Delete the CA certificate, so that we go back to boot-strapping mode
def delete_cacert():
    try:
        os.remove(cacert_filename)
    except OSError:
        # Ignore error if file doesn't exist
        pass

def update(session, args):
    # Refresh bridge network UUIDs in case this host joined or left a pool.
    script = "/opt/xensource/libexec/interface-reconfigure"
    try:
        retval = subprocess.call([script, "rewrite"])
        if retval != 0:
            syslog.syslog("%s exited with status %d" % (script, retval))
    except OSError, e:
        syslog.syslog("%s: failed to execute (%s)" % (script, e.strerror))

    pools = session.xenapi.pool.get_all()
    # We assume there is only ever one pool...
    if len(pools) == 0:
        raise XenAPIPlugin.Failure("NO_POOL_FOR_HOST", [])
    if len(pools) > 1:
        raise XenAPIPlugin.Failure("MORE_THAN_ONE_POOL_FOR_HOST", [])
    pool = session.xenapi.pool.get_record(pools[0])
    controller = pool.get("vswitch_controller", "")
    ret_str = ""
    currentController = vswitchCurrentController()
    if controller == "" and currentController != "":
        delete_cacert()
        try:
            emergency_reset(session, None)
        except:
            pass
        removeControllerCfg()
        ret_str += "Successfully removed controller config.  "
    elif controller != currentController:
        delete_cacert()
        try:
            emergency_reset(session, None)
        except:
            pass
        setControllerCfg(controller)
        ret_str += "Successfully set controller to %s.  " % controller

    try:
        pool_fail_mode = pool["other_config"]["vswitch-controller-fail-mode"]
    except KeyError, e:
        pool_fail_mode = None

    bton = {}

    for n in session.xenapi.network.get_all():
        rec = session.xenapi.network.get_record(n)
        try:
            bton[rec['bridge']] = rec
        except KeyError:
            pass

    dib_changed = False
    fail_mode_changed = False
    for bridge in vswitchCfgQuery(['list-br']).split():
        network = bton[bridge]
        bridge = vswitchCfgQuery(['br-to-parent', bridge])

        xapi_dib = network['other_config'].get('vswitch-disable-in-band')
        if not xapi_dib:
            xapi_dib = ''

        ovs_dib = vswitchCfgQuery(['--', '--if-exists', 'get', 'Bridge',
                                   bridge,
                                   'other_config:disable-in-band']).strip('"')

        # Do nothing if setting is invalid, and warn the user.
        if xapi_dib not in ['true', 'false', '']:
            ret_str += '"' + xapi_dib + '"' + \
                ' is an invalid value for vswitch-disable-in-band on ' + \
                bridge + '  '

        # Change bridge disable-in-band option if XAPI and OVS states differ.
        elif xapi_dib != ovs_dib:
            # 'true' or 'false'
            if xapi_dib:
                vswitchCfgMod(['--', 'set', 'Bridge', bridge,
                               'other_config:disable-in-band=' + xapi_dib])
            # '' or None
            else:
                vswitchCfgMod(['--', 'remove', 'Bridge', bridge,
                               'other_config', 'disable-in-band'])
            dib_changed = True

        # Change bridge fail_mode if XAPI state differs from OVS state.
        bridge_fail_mode = vswitchCfgQuery(["get", "Bridge",
            bridge, "fail_mode"]).strip('[]"')

        try:
            fail_mode = bton[bridge]["other_config"]["vswitch-controller-fail-mode"]
        except KeyError, e:
            fail_mode = None

        if fail_mode not in ['secure', 'standalone']:
            fail_mode = pool_fail_mode

        if fail_mode != 'secure':
            fail_mode = 'standalone'

        if bridge_fail_mode != fail_mode:
            vswitchCfgMod(['--', 'set', 'Bridge', bridge,
                "fail_mode=%s" % fail_mode])
            fail_mode_changed = True

    if dib_changed:
        ret_str += "Updated in-band management.  "
    if fail_mode_changed:
        ret_str += "Updated fail_mode.  "

    if ret_str != '':
        return ret_str
    else:
        return "No change to configuration"

def vswitchCurrentController():
    controller = vswitchCfgQuery(["get-manager"])
    if controller == "":
        return controller
    if len(controller) < 4 or controller[0:4] != "ssl:":
        return controller
    else:
        return controller.split(':')[1]

def removeControllerCfg():
    vswitchCfgMod(["--", "del-manager",
                   "--", "del-ssl"])

def setControllerCfg(controller):
    # /etc/xensource/xapi-ssl.pem is mentioned twice below because it
    # contains both the private key and the certificate.
    vswitchCfgMod(["--", "del-manager",
                   "--", "del-ssl",
                   "--", "--bootstrap", "set-ssl",
                   "/etc/xensource/xapi-ssl.pem",
                   "/etc/xensource/xapi-ssl.pem",
                   cacert_filename,
                   "--", "set-manager", 'ssl:' + controller + ':6632'])

def vswitchCfgQuery(action_args):
    cmd = [vsctl, "--timeout=5", "-vANY:console:emer"] + action_args
    output = subprocess.Popen(cmd, stdout=subprocess.PIPE).communicate()
    if len(output) == 0 or output[0] == None:
        output = ""
    else:
        output = output[0].strip()
    return output

def vswitchCfgMod(action_args):
    cmd = [vsctl, "--timeout=5", "-vANY:console:emer"] + action_args
    exitcode = subprocess.call(cmd)
    if exitcode != 0:
        raise XenAPIPlugin.Failure("VSWITCH_CONFIG_MOD_FAILURE",
                                   [ str(exitcode) , str(action_args) ])

def emergency_reset(session, args):
    cmd = [vsctl, "--timeout=5", "emer-reset"]
    exitcode = subprocess.call(cmd)
    if exitcode != 0:
        raise XenAPIPlugin.Failure("VSWITCH_EMER_RESET_FAILURE",
                                   [ str(exitcode) ])

    return "Successfully reset configuration"
    
if __name__ == "__main__":
    XenAPIPlugin.dispatch({"update": update,
                           "emergency_reset": emergency_reset})

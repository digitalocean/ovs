<?xml version="1.0" encoding="utf-8"?>
<database title="Open vSwitch Configuration Database">
  <p>
    A database with this schema holds the configuration for one Open
    vSwitch daemon.  The top-level configuration for the daemon is the
    <ref table="Open_vSwitch"/> table, which must have exactly one
    record.  Records in other tables are significant only when they
    can be reached directly or indirectly from the <ref
    table="Open_vSwitch"/> table.  Records that are not reachable from
    the <ref table="Open_vSwitch"/> table are automatically deleted
    from the database, except for records in a few distinguished
    ``root set'' tables noted below.
  </p>

  <table name="Open_vSwitch" title="Open vSwitch configuration.">
    Configuration for an Open vSwitch daemon.  There must be exactly
    one record in the <ref table="Open_vSwitch"/> table.

    <group title="Configuration">
      <column name="bridges">
        Set of bridges managed by the daemon.
      </column>

      <column name="ssl">
        SSL used globally by the daemon.
      </column>

      <column name="external_ids">
        Key-value pairs for use by external frameworks that integrate
        with Open vSwitch, rather than by Open vSwitch itself.  System
        integrators should either use the Open vSwitch development
        mailing list to coordinate on common key-value definitions, or
        choose key names that are likely to be unique.  The currently
        defined common key-value pairs are:
        <dl>
          <dt><code>system-id</code></dt>
          <dd>A unique identifier for the Open vSwitch's physical host.
            The form of the identifier depends on the type of the host.
            On a Citrix XenServer, this will likely be the same as
            <code>xs-system-uuid</code>.</dd>
          <dt><code>xs-system-uuid</code></dt>
          <dd>The Citrix XenServer universally unique identifier for the
            physical host as displayed by <code>xe host-list</code>.</dd>
        </dl>
      </column>
    </group>

    <group title="Status">
      <column name="next_cfg">
        Sequence number for client to increment.  When a client modifies
        any part of the database configuration and wishes to wait for
        Open vSwitch to finish applying the changes, it may increment
        this sequence number.
      </column>

      <column name="cur_cfg">
        Sequence number that Open vSwitch sets to the current value of
        <ref column="next_cfg"/> after it finishes applying a set of
        configuration changes.
      </column>

      <column name="capabilities">
        Describes functionality supported by the hardware and software platform
        on which this Open vSwitch is based.  Clients should not modify this
        column.  See the <ref table="Capability"/> description for defined
        capability categories and the meaning of associated
        <ref table="Capability"/> records.
      </column>

      <column name="statistics">
        <p>
          Key-value pairs that report statistics about a system running an Open
          vSwitch.  These are updated periodically (currently, every 5
          seconds).  Key-value pairs that cannot be determined or that do not
          apply to a platform are omitted.
        </p>

        <dl>
          <dt><code>cpu</code></dt>
          <dd>
            <p>
              Number of CPU processors, threads, or cores currently online and
              available to the operating system on which Open vSwitch is
              running, as an integer.  This may be less than the number
              installed, if some are not online or if they are not available to
              the operating system.
            </p>
            <p>
              Open vSwitch userspace processes are not multithreaded, but the
              Linux kernel-based datapath is.
            </p>
          </dd>

          <dt><code>load_average</code></dt>
          <dd>
            <p>
              A comma-separated list of three floating-point numbers,
              representing the system load average over the last 1, 5, and 15
              minutes, respectively.
            </p>
          </dd>

          <dt><code>memory</code></dt>
          <dd>
            <p>
              A comma-separated list of integers, each of which represents a
              quantity of memory in kilobytes that describes the operating
              system on which Open vSwitch is running.  In respective order,
              these values are:
            </p>

            <ol>
              <li>Total amount of RAM allocated to the OS.</li>
              <li>RAM allocated to the OS that is in use.</li>
              <li>RAM that can be flushed out to disk or otherwise discarded
              if that space is needed for another purpose.  This number is
              necessarily less than or equal to the previous value.</li>
              <li>Total disk space allocated for swap.</li>
              <li>Swap space currently in use.</li>
            </ol>

            <p>
              On Linux, all five values can be determined and are included.  On
              other operating systems, only the first two values can be
              determined, so the list will only have two values.
            </p>
          </dd>

          <dt><code>process_</code><var>name</var></dt>
          <dd>
            <p>
              One such key-value pair will exist for each running Open vSwitch
              daemon process, with <var>name</var> replaced by the daemon's
              name (e.g. <code>process_ovs-vswitchd</code>).  The value is a
              comma-separated list of integers.  The integers represent the
              following, with memory measured in kilobytes and durations in
              milliseconds:
            </p>

            <ol>
              <li>The process's virtual memory size.</li>
              <li>The process's resident set size.</li>
              <li>The amount of user and system CPU time consumed by the
              process.</li>
              <li>The number of times that the process has crashed and been
              automatically restarted by the monitor.</li>
              <li>The duration since the process was started.</li>
              <li>The duration for which the process has been running.</li>
            </ol>

            <p>
              The interpretation of some of these values depends on whether the
              process was started with the <option>--monitor</option>.  If it
              was not, then the crash count will always be 0 and the two
              durations will always be the same.  If <option>--monitor</option>
              was given, then the crash count may be positive; if it is, the
              latter duration is the amount of time since the most recent crash
              and restart.
            </p>

            <p>
              There will be one key-value pair for each file in Open vSwitch's
              ``run directory'' (usually <code>/var/run/openvswitch</code>)
              whose name ends in <code>.pid</code>, whose contents are a
              process ID, and which is locked by a running process.  The
              <var>name</var> is taken from the pidfile's name.
            </p>

            <p>
              Currently Open vSwitch is only able to obtain all of the above
              detail on Linux systems.  On other systems, the same key-value
              pairs will be present but the values will always be the empty
              string.
            </p>
          </dd>

          <dt><code>file_systems</code></dt>
          <dd>
            <p>
              A space-separated list of information on local, writable file
              systems.  Each item in the list describes one file system and
              consists in turn of a comma-separated list of the following:
            </p>

            <ol>
              <li>Mount point, e.g. <code>/</code> or <code>/var/log</code>.
              Any spaces or commas in the mount point are replaced by
              underscores.</li>
              <li>Total size, in kilobytes, as an integer.</li>
              <li>Amount of storage in use, in kilobytes, as an integer.</li>
            </ol>

            <p>
              This key-value pair is omitted if there are no local, writable
              file systems or if Open vSwitch cannot obtain the needed
              information.
            </p>
          </dd>
        </dl>
      </column>
    </group>

    <group title="Version Reporting">
      <p>
        These columns report the types and versions of the hardware and
        software running Open vSwitch.  We recommend in general that software
        should test whether specific features are supported instead of relying
        on version number checks.  These values are primarily intended for
        reporting to human administrators.
      </p>

      <column name="ovs_version">
        The Open vSwitch version number, e.g. <code>1.1.0</code>.
        If Open vSwitch was configured with a build number, then it is
        also included, e.g. <code>1.1.0+build6579</code>.
      </column>

      <column name="db_version">
        <p>
          The database schema version number in the form
          <code><var>major</var>.<var>minor</var>.<var>tweak</var></code>,
          e.g. <code>1.2.3</code>.  Whenever the database schema is changed in
          a non-backward compatible way (e.g. deleting a column or a table),
          <var>major</var> is incremented.  When the database schema is changed
          in a backward compatible way (e.g. adding a new column),
          <var>minor</var> is incremented.  When the database schema is changed
          cosmetically (e.g. reindenting its syntax), <var>tweak</var> is
          incremented.
        </p>

        <p>
          The schema version is part of the database schema, so it can also be
          retrieved by fetching the schema using the Open vSwitch database
          protocol.
        </p>
      </column>

      <column name="system_type">
        <p>
          An identifier for the type of system on top of which Open vSwitch
          runs, e.g. <code>XenServer</code> or <code>KVM</code>.
        </p>
        <p>
          System integrators are responsible for choosing and setting an
          appropriate value for this column.
        </p>
      </column>

      <column name="system_version">
        <p>
          The version of the system identified by <ref column="system_type"/>,
          e.g. <code>5.6.100-39265p</code> on XenServer 5.6.100 build 39265.
        </p>
        <p>
          System integrators are responsible for choosing and setting an
          appropriate value for this column.
        </p>
      </column>

    </group>

    <group title="Database Configuration">
      <p>
        These columns primarily configure the Open vSwitch database
        (<code>ovsdb-server</code>), not the Open vSwitch switch
        (<code>ovs-vswitchd</code>).  The OVSDB database also uses the <ref
        column="ssl"/> settings.
      </p>

      <p>
        The Open vSwitch switch does read the database configuration to
        determine remote IP addresses to which in-band control should apply.
      </p>

      <column name="manager_options">
        Database clients to which the Open vSwitch database server should
        connect or to which it should listen, along with options for how these
        connection should be configured.  See the <ref table="Manager"/> table
        for more information.
      </column>
    </group>
  </table>

  <table name="Bridge">
    <p>
      Configuration for a bridge within an
      <ref table="Open_vSwitch"/>.
    </p>
    <p>
      A <ref table="Bridge"/> record represents an Ethernet switch with one or
      more ``ports,'' which are the <ref table="Port"/> records pointed to by
      the <ref table="Bridge"/>'s <ref column="ports"/> column.
    </p>

    <group title="Core Features">
      <column name="name">
        Bridge identifier.  Should be alphanumeric and no more than about 8
        bytes long.  Must be unique among the names of ports, interfaces, and
        bridges on a host.
      </column>

      <column name="ports">
        Ports included in the bridge.
      </column>

      <column name="mirrors">
        Port mirroring configuration.
      </column>

      <column name="netflow">
        NetFlow configuration.
      </column>

      <column name="sflow">
        sFlow configuration.
      </column>

      <column name="flood_vlans">
        VLAN IDs of VLANs on which MAC address learning should be disabled, so
        that packets are flooded instead of being sent to specific ports that
        are believed to contain packets' destination MACs.  This should
        ordinarily be used to disable MAC learning on VLANs used for mirroring
        (RSPAN VLANs).  It may also be useful for debugging.
      </column>
    </group>

    <group title="OpenFlow Configuration">
      <column name="controller">
        OpenFlow controller set.  If unset, then no OpenFlow controllers
        will be used.
      </column>

      <column name="fail_mode">
        <p>When a controller is configured, it is, ordinarily, responsible
          for setting up all flows on the switch.  Thus, if the connection to
          the controller fails, no new network connections can be set up.
          If the connection to the controller stays down long enough,
          no packets can pass through the switch at all.  This setting
          determines the switch's response to such a situation.  It may be set
          to one of the following:
          <dl>
            <dt><code>standalone</code></dt>
            <dd>If no message is received from the controller for three
              times the inactivity probe interval
              (see <ref column="inactivity_probe"/>), then Open vSwitch
              will take over responsibility for setting up flows.  In
              this mode, Open vSwitch causes the bridge to act like an
              ordinary MAC-learning switch.  Open vSwitch will continue
              to retry connecting to the controller in the background
              and, when the connection succeeds, it will discontinue its
              standalone behavior.</dd>
            <dt><code>secure</code></dt>
            <dd>Open vSwitch will not set up flows on its own when the
              controller connection fails or when no controllers are
              defined.  The bridge will continue to retry connecting to
              any defined controllers forever.</dd>
          </dl>
        </p>
        <p>If this value is unset, the default is implementation-specific.</p>
        <p>When more than one controller is configured,
          <ref column="fail_mode"/> is considered only when none of the
          configured controllers can be contacted.</p>
      </column>

      <column name="datapath_id">
        Reports the OpenFlow datapath ID in use.  Exactly 16 hex
        digits.  (Setting this column will have no useful effect.  Set
        <ref column="other_config"/>:<code>other-config</code>
        instead.)
      </column>
    </group>

    <group title="Other Features">
      <column name="datapath_type">
        Name of datapath provider.  The kernel datapath has
        type <code>system</code>.  The userspace datapath has
        type <code>netdev</code>.
      </column>

      <column name="external_ids">
        Key-value pairs for use by external frameworks that integrate
        with Open vSwitch, rather than by Open vSwitch itself.  System
        integrators should either use the Open vSwitch development
        mailing list to coordinate on common key-value definitions, or
        choose key names that are likely to be unique.  The currently
        defined key-value pairs are:
        <dl>
          <dt><code>bridge-id</code></dt>
          <dd>A unique identifier of the bridge.  On Citrix XenServer this
            will commonly be the same as <code>xs-network-uuids</code>.</dd>
          <dt><code>xs-network-uuids</code></dt>
          <dd>Semicolon-delimited set of universally unique identifier(s) for
            the network with which this bridge is associated on a Citrix
            XenServer host.  The network identifiers are RFC 4122 UUIDs as
            displayed by, e.g., <code>xe network-list</code>.</dd>
        </dl>
      </column>

      <column name="other_config">
        Key-value pairs for configuring rarely used bridge
        features.  The currently defined key-value pairs are:
        <dl>
          <dt><code>datapath-id</code></dt>
          <dd>Exactly 16 hex
            digits to set the OpenFlow datapath ID to a specific
            value.  May not be all-zero.</dd>
          <dt><code>disable-in-band</code></dt>
          <dd>If set to <code>true</code>, disable in-band control on
            the bridge regardless of controller and manager settings.</dd>
          <dt><code>hwaddr</code></dt>
          <dd>An Ethernet address in the form
            <var>xx</var>:<var>xx</var>:<var>xx</var>:<var>xx</var>:<var>xx</var>:<var>xx</var>
            to set the hardware address of the local port and influence the
            datapath ID.</dd>
          <dt><code>in-band-queue</code></dt>
          <dd>
            A queue ID as a nonnegative integer.  This sets the OpenFlow queue
            ID that will be used by flows set up by in-band control on this
            bridge.  If unset, or if the port used by an in-band control flow
            does not have QoS configured, or if the port does not have a queue
            with the specified ID, the default queue is used instead.
          </dd>
        </dl>
      </column>
    </group>
  </table>

  <table name="Port" table="Port or bond configuration.">
    <p>A port within a <ref table="Bridge"/>.</p>
    <p>Most commonly, a port has exactly one ``interface,'' pointed to by its
      <ref column="interfaces"/> column.  Such a port logically
      corresponds to a port on a physical Ethernet switch.  A port
      with more than one interface is a ``bonded port'' (see
      <ref group="Bonding Configuration"/>).</p>
    <p>Some properties that one might think as belonging to a port are actually
      part of the port's <ref table="Interface"/> members.</p>

    <column name="name">
      Port name.  Should be alphanumeric and no more than about 8
      bytes long.  May be the same as the interface name, for
      non-bonded ports.  Must otherwise be unique among the names of
      ports, interfaces, and bridges on a host.
    </column>

    <column name="interfaces">
      The port's interfaces.  If there is more than one, this is a
      bonded Port.
    </column>

    <group title="VLAN Configuration">
      <p>A bridge port must be configured for VLANs in one of two
        mutually exclusive ways:
        <ul>
          <li>A ``trunk port'' has an empty value for <ref
            column="tag"/>.  Its <ref column="trunks"/> value may be
            empty or non-empty.</li>
          <li>An ``implicitly tagged VLAN port'' or ``access port''
            has an nonempty value for <ref column="tag"/>.  Its
            <ref column="trunks"/> value must be empty.</li>
        </ul>
        If <ref column="trunks"/> and <ref column="tag"/> are both
        nonempty, the configuration is ill-formed.
      </p>

      <column name="tag">
        <p>
          If this is an access port (see above), the port's implicitly
          tagged VLAN.  Must be empty if this is a trunk port.
        </p>
        <p>
          Frames arriving on trunk ports will be forwarded to this
          port only if they are tagged with the given VLAN (or, if
          <ref column="tag"/> is 0, then if they lack a VLAN header).
          Frames arriving on other access ports will be forwarded to
          this port only if they have the same <ref column="tag"/>
          value.  Frames forwarded to this port will not have an
          802.1Q header.
        </p>
        <p>
          When a frame with a 802.1Q header that indicates a nonzero
          VLAN is received on an access port, it is discarded.
        </p>
      </column>

      <column name="trunks">
        <p>
          If this is a trunk port (see above), the 802.1Q VLAN(s) that
          this port trunks; if it is empty, then the port trunks all
          VLANs.  Must be empty if this is an access port.
        </p>
        <p>
          Frames arriving on trunk ports are dropped if they are not
          in one of the specified VLANs.  For this purpose, packets
          that have no VLAN header are treated as part of VLAN 0.
        </p>
      </column>
    </group>

    <group title="Bonding Configuration">
      <p>A port that has more than one interface is a ``bonded port.'' Bonding
        allows for load balancing and fail-over.  Some kinds of bonding will
        work with any kind of upstream switch:</p>

      <dl>
        <dt><code>balance-slb</code></dt>
        <dd>
          Balances flows among slaves based on source MAC address and output
          VLAN, with periodic rebalancing as traffic patterns change.
        </dd>

        <dt><code>active-backup</code></dt>
        <dd>
          Assigns all flows to one slave, failing over to a backup slave when
          the active slave is disabled.
        </dd>
      </dl>

      <p>
        The following mode requires the upstream switch to support 802.3ad with
        successful LACP negotiation.  If LACP negotiation fails then
        <code>balance-slb</code> mode is used as a fallback:
      </p>

      <dl>
        <dt><code>balance-tcp</code></dt>
        <dd>
          Balances flows among slaves based on L2, L3, and L4 protocol
          information such as destination MAC address, IP address, and TCP
          port.
        </dd>
      </dl>

      <p>These columns apply only to bonded ports.  Their values are
        otherwise ignored.</p>

      <column name="bond_mode">
        <p>The type of bonding used for a bonded port.  Defaults to
          <code>balance-slb</code> if unset.
        </p>
      </column>

      <column name="bond_updelay">
        <p>For a bonded port, the number of milliseconds for which carrier must
          stay up on an interface before the interface is considered to be up.
          Specify <code>0</code> to enable the interface immediately.</p>
        <p>This setting is honored only when at least one bonded interface is
          already enabled.  When no interfaces are enabled, then the first bond
          interface to come up is enabled immediately.</p>
      </column>

      <column name="bond_downdelay">
        For a bonded port, the number of milliseconds for which carrier must
        stay down on an interface before the interface is considered to be
        down.  Specify <code>0</code> to disable the interface immediately.
      </column>

      <column name="bond_fake_iface">
        For a bonded port, whether to create a fake internal interface with the
        name of the port.  Use only for compatibility with legacy software that
        requires this.
      </column>

      <column name="lacp">
        <p>Configures LACP on this port.  LACP allows directly connected
          switches to negotiate which links may be bonded.  LACP may be enabled
          on non-bonded ports for the benefit of any switches they may be
          connected to.  <code>active</code> ports are allowed to initiate LACP
          negotiations.  <code>passive</code> ports are allowed to participate
          in LACP negotiations initiated by a remote switch, but not allowed to
          initiate such negotiations themselves. If unset Open vSwitch will
          choose a reasonable default. </p>
      </column>

    </group>

    <group title="Other Features">
      <column name="qos">
        Quality of Service configuration for this port.
      </column>

      <column name="mac">
        The MAC address to use for this port for the purpose of choosing the
        bridge's MAC address.  This column does not necessarily reflect the
        port's actual MAC address, nor will setting it change the port's actual
        MAC address.
      </column>

      <column name="fake_bridge">
        Does this port represent a sub-bridge for its tagged VLAN within the
        Bridge?  See ovs-vsctl(8) for more information.
      </column>

      <column name="external_ids">
        <p>
          Key-value pairs for use by external frameworks that integrate with
          Open vSwitch, rather than by Open vSwitch itself.  System integrators
          should either use the Open vSwitch development mailing list to
          coordinate on common key-value definitions, or choose key names that
          are likely to be unique.
        </p>
        <p>
          No key-value pairs native to <ref table="Port"/> are currently
          defined.  For fake bridges (see the <ref column="fake_bridge"/>
          column), external IDs for the fake bridge are defined here by
          prefixing a <ref table="Bridge"/> <ref table="Bridge"
          column="external_ids"/> key with <code>fake-bridge-</code>,
          e.g. <code>fake-bridge-xs-network-uuids</code>.
        </p>
      </column>

      <column name="other_config">
        Key-value pairs for configuring rarely used port features.  The
        currently defined key-value pairs are:
        <dl>
          <dt><code>hwaddr</code></dt>
          <dd>An Ethernet address in the form
            <code><var>xx</var>:<var>xx</var>:<var>xx</var>:<var>xx</var>:<var>xx</var>:<var>xx</var></code>.</dd>
          <dt><code>bond-rebalance-interval</code></dt>
          <dd>For an SLB bonded port, the number of milliseconds between
            successive attempts to rebalance the bond, that is, to
            move source MACs and their flows from one interface on
            the bond to another in an attempt to keep usage of each
            interface roughly equal.  The default is 10000 (10
            seconds), and the minimum is 1000 (1 second).</dd>
          <dt><code>bond-detect-mode</code></dt>
          <dd> Sets the method used to detect link failures in a bonded port.
            Options are <code>carrier</code> and <code>miimon</code>. Defaults
            to <code>carrier</code> which uses each interface's carrier to detect
            failures.  When set to <code>miimon</code>, will check for failures
            by polling each interface's MII. </dd>
          <dt><code>bond-miimon-interval</code></dt>
          <dd> The number of milliseconds between successive attempts to
            poll each interface's MII.  Only relevant on ports which use
            <code>miimon</code> to detect failures. </dd>
          <dt><code>lacp-system-priority</code></dt>
          <dd> The LACP system priority of this <ref table="Port"/>.  In
            LACP negotiations, link status decisions are made by the system
            with the numerically lower priority.  Must be a number between 1
            and 65535.</dd>
          <dt><code>lacp-time</code></dt>
          <dd> The LACP timing which should be used on this
            <ref table="Port"/>.  Possible values are <code>fast</code> and
            <code>slow</code>.  By default <code>slow</code> is used.  When
            configured to be <code>fast</code> more frequent LACP heartbeats
            will be requested causing connectivity problems to be detected more
            quickly.</dd>
        </dl>
      </column>
    </group>
  </table>

  <table name="Interface" title="One physical network device in a Port.">
    An interface within a <ref table="Port"/>.

    <group title="Core Features">
      <column name="name">
        Interface name.  Should be alphanumeric and no more than about 8 bytes
        long.  May be the same as the port name, for non-bonded ports.  Must
        otherwise be unique among the names of ports, interfaces, and bridges
        on a host.
      </column>

      <column name="mac">
        <p>Ethernet address to set for this interface.  If unset then the
          default MAC address is used:</p>
        <ul>
          <li>For the local interface, the default is the lowest-numbered MAC
            address among the other bridge ports, either the value of the
            <ref table="Port" column="mac"/> in its <ref table="Port"/> record,
            if set, or its actual MAC (for bonded ports, the MAC of its slave
            whose name is first in alphabetical order).  Internal ports and
            bridge ports that are used as port mirroring destinations (see the
            <ref table="Mirror"/> table) are ignored.</li>
          <li>For other internal interfaces, the default MAC is randomly
            generated.</li>
          <li>External interfaces typically have a MAC address associated with
            their hardware.</li>
        </ul>
        <p>Some interfaces may not have a software-controllable MAC
        address.</p>
      </column>

      <column name="ofport">
        <p>OpenFlow port number for this interface.  Unlike most columns, this
          column's value should be set only by Open vSwitch itself.  Other
          clients should set this column to an empty set (the default) when
          creating an <ref table="Interface"/>.</p>
        <p>Open vSwitch populates this column when the port number becomes
          known.  If the interface is successfully added,
          <ref column="ofport"/> will be set to a number between 1 and 65535
          (generally either in the range 1 to 65279, inclusive, or 65534, the
          port number for the OpenFlow ``local port'').  If the interface
          cannot be added then Open vSwitch sets this column
          to -1.</p>
      </column>
    </group>

    <group title="System-Specific Details">
      <column name="type">
        The interface type, one of:
        <dl>
          <dt><code>system</code></dt>
          <dd>An ordinary network device, e.g. <code>eth0</code> on Linux.
            Sometimes referred to as ``external interfaces'' since they are
            generally connected to hardware external to that on which the Open
            vSwitch is running.  The empty string is a synonym for
            <code>system</code>.</dd>
          <dt><code>internal</code></dt>
          <dd>A simulated network device that sends and receives traffic.  An
            internal interface whose <ref column="name"/> is the same as its
            bridge's <ref table="Open_vSwitch" column="name"/> is called the
            ``local interface.''  It does not make sense to bond an internal
            interface, so the terms ``port'' and ``interface'' are often used
            imprecisely for internal interfaces.</dd>
          <dt><code>tap</code></dt>
          <dd>A TUN/TAP device managed by Open vSwitch.</dd>
          <dt><code>gre</code></dt>
          <dd>An Ethernet over RFC 2890 Generic Routing Encapsulation over IPv4
             tunnel.  Each tunnel must be uniquely identified by the
             combination of <code>remote_ip</code>, <code>local_ip</code>, and
             <code>in_key</code>.  Note that if two ports are defined that are
             the same except one has an optional identifier and the other does
             not, the more specific one is matched first.  <code>in_key</code>
             is considered more specific than <code>local_ip</code> if a port
             defines one and another port defines the other.  The following
             options may be specified in the <ref column="options"/> column:
            <dl>
              <dt><code>remote_ip</code></dt>
              <dd>Required.  The tunnel endpoint.</dd>
            </dl>
            <dl>
              <dt><code>local_ip</code></dt>
              <dd>Optional.  The destination IP that received packets must
                match.  Default is to match all addresses.</dd>
            </dl>
            <dl>
              <dt><code>in_key</code></dt>
              <dd>Optional.  The GRE key that received packets must contain.
                It may either be a 32-bit number (no key and a key of 0 are
                treated as equivalent) or the word <code>flow</code>.  If
                <code>flow</code> is specified then any key will be accepted
                and the key will be placed in the <code>tun_id</code> field
                for matching in the flow table.  The ovs-ofctl manual page
                contains additional information about matching fields in
                OpenFlow flows.  Default is no key.</dd>
            </dl>
            <dl>
              <dt><code>out_key</code></dt>
              <dd>Optional.  The GRE key to be set on outgoing packets.  It may
                either be a 32-bit number or the word <code>flow</code>.  If
                <code>flow</code> is specified then the key may be set using
                the <code>set_tunnel</code> Nicira OpenFlow vendor extension (0
                is used in the absence of an action).  The ovs-ofctl manual
                page contains additional information about the Nicira OpenFlow
                vendor extensions.  Default is no key.</dd>
            </dl>
            <dl>
              <dt><code>key</code></dt>
              <dd>Optional.  Shorthand to set <code>in_key</code> and
                <code>out_key</code> at the same time.</dd>
            </dl>
            <dl>
              <dt><code>tos</code></dt>
              <dd>Optional.  The value of the ToS bits to be set on the
                encapsulating packet.  It may also be the word
                <code>inherit</code>, in which case the ToS will be copied from
                the inner packet if it is IPv4 or IPv6 (otherwise it will be
                0).  Note that the ECN fields are always inherited.  Default is
                0.</dd>
            </dl>
            <dl>
              <dt><code>ttl</code></dt>
              <dd>Optional.  The TTL to be set on the encapsulating packet.
                It may also be the word <code>inherit</code>, in which case the
                TTL will be copied from the inner packet if it is IPv4 or IPv6
                (otherwise it will be the system default, typically 64).
                Default is the system default TTL.</dd>
            </dl>
            <dl>
              <dt><code>csum</code></dt>
              <dd>Optional.  Compute GRE checksums on outgoing packets.
                Checksums present on incoming packets will be validated
                regardless of this setting.  Note that GRE checksums
                impose a significant performance penalty as they cover the
                entire packet.  As the contents of the packet is typically
                covered by L3 and L4 checksums, this additional checksum only
                adds value for the GRE and encapsulated Ethernet headers.
                Default is disabled, set to <code>true</code> to enable.</dd>
            </dl>
            <dl>
              <dt><code>pmtud</code></dt>
              <dd>Optional.  Enable tunnel path MTU discovery.  If enabled
                ``ICMP destination unreachable - fragmentation'' needed
                messages will be generated for IPv4 packets with the DF bit set
                and IPv6 packets above the minimum MTU if the packet size
                exceeds the path MTU minus the size of the tunnel headers.  It
                also forces the encapsulating packet DF bit to be set (it is
                always set if the inner packet implies path MTU discovery).
                Note that this option causes behavior that is typically
                reserved for routers and therefore is not entirely in
                compliance with the IEEE 802.1D specification for bridges.
                Default is enabled, set to <code>false</code> to disable.</dd>
            </dl>
            <dl>
              <dt><code>header_cache</code></dt>
              <dd>Optional.  Enable caching of tunnel headers and the output
                path.  This can lead to a significant performance increase
                without changing behavior.  In general it should not be
                necessary to adjust this setting.  However, the caching can
                bypass certain components of the IP stack (such as IP tables)
                and it may be useful to disable it if these features are
                required or as a debugging measure.  Default is enabled, set to
                <code>false</code> to disable.</dd>
            </dl>
          </dd>
          <dt><code>ipsec_gre</code></dt>
          <dd>An Ethernet over RFC 2890 Generic Routing Encapsulation
            over IPv4 IPsec tunnel.  Each tunnel (including those of type
            <code>gre</code>) must be uniquely identified by the
            combination of <code>remote_ip</code> and
            <code>local_ip</code>.  Note that if two ports are defined
            that are the same except one has an optional identifier and
            the other does not, the more specific one is matched first.
            An authentication method of <code>peer_cert</code> or
            <code>psk</code> must be defined.  The following options may
            be specified in the <ref column="options"/> column:
            <dl>
              <dt><code>remote_ip</code></dt>
              <dd>Required.  The tunnel endpoint.</dd>
            </dl>
            <dl>
              <dt><code>local_ip</code></dt>
              <dd>Optional.  The destination IP that received packets must
                match.  Default is to match all addresses.</dd>
            </dl>
            <dl>
              <dt><code>peer_cert</code></dt>
              <dd>Required for certificate authentication.  A string
                containing the peer's certificate in PEM format.
                Additionally the host's certificate must be specified
                with the <code>certificate</code> option.</dd>
            </dl>
            <dl>
              <dt><code>certificate</code></dt>
              <dd>Required for certificate authentication.  The name of a
                PEM file containing a certificate that will be presented
                to the peer during authentication.</dd>
            </dl>
            <dl>
              <dt><code>private_key</code></dt>
              <dd>Optional for certificate authentication.  The name of
                a PEM file containing the private key associated with
                <code>certificate</code>.  If <code>certificate</code>
                contains the private key, this option may be omitted.</dd>
            </dl>
            <dl>
              <dt><code>psk</code></dt>
              <dd>Required for pre-shared key authentication.  Specifies a
                pre-shared key for authentication that must be identical on
                both sides of the tunnel.</dd>
            </dl>
            <dl>
              <dt><code>in_key</code></dt>
              <dd>Optional.  The GRE key that received packets must contain.
                It may either be a 32-bit number (no key and a key of 0 are
                treated as equivalent) or the word <code>flow</code>.  If
                <code>flow</code> is specified then any key will be accepted
                and the key will be placed in the <code>tun_id</code> field
                for matching in the flow table.  The ovs-ofctl manual page
                contains additional information about matching fields in
                OpenFlow flows.  Default is no key.</dd>
            </dl>
            <dl>
              <dt><code>out_key</code></dt>
              <dd>Optional.  The GRE key to be set on outgoing packets.  It may
                either be a 32-bit number or the word <code>flow</code>.  If
                <code>flow</code> is specified then the key may be set using
                the <code>set_tunnel</code> Nicira OpenFlow vendor extension (0
                is used in the absence of an action).  The ovs-ofctl manual
                page contains additional information about the Nicira OpenFlow
                vendor extensions.  Default is no key.</dd>
            </dl>
            <dl>
              <dt><code>key</code></dt>
              <dd>Optional.  Shorthand to set <code>in_key</code> and
                <code>out_key</code> at the same time.</dd>
            </dl>
            <dl>
              <dt><code>tos</code></dt>
              <dd>Optional.  The value of the ToS bits to be set on the
                encapsulating packet.  It may also be the word
                <code>inherit</code>, in which case the ToS will be copied from
                the inner packet if it is IPv4 or IPv6 (otherwise it will be
                0).  Note that the ECN fields are always inherited.  Default is
                0.</dd>
            </dl>
            <dl>
              <dt><code>ttl</code></dt>
              <dd>Optional.  The TTL to be set on the encapsulating packet.
                It may also be the word <code>inherit</code>, in which case the
                TTL will be copied from the inner packet if it is IPv4 or IPv6
                (otherwise it will be the system default, typically 64).
                Default is the system default TTL.</dd>
            </dl>
            <dl>
              <dt><code>csum</code></dt>
              <dd>Optional.  Compute GRE checksums on outgoing packets.
                Checksums present on incoming packets will be validated
                regardless of this setting.  Note that GRE checksums
                impose a significant performance penalty as they cover the
                entire packet.  As the contents of the packet is typically
                covered by L3 and L4 checksums, this additional checksum only
                adds value for the GRE and encapsulated Ethernet headers.
                Default is disabled, set to <code>true</code> to enable.</dd>
            </dl>
            <dl>
              <dt><code>pmtud</code></dt>
              <dd>Optional.  Enable tunnel path MTU discovery.  If enabled
                ``ICMP destination unreachable - fragmentation'' needed
                messages will be generated for IPv4 packets with the DF bit set
                and IPv6 packets above the minimum MTU if the packet size
                exceeds the path MTU minus the size of the tunnel headers.  It
                also forces the encapsulating packet DF bit to be set (it is
                always set if the inner packet implies path MTU discovery).
                Note that this option causes behavior that is typically
                reserved for routers and therefore is not entirely in
                compliance with the IEEE 802.1D specification for bridges.
                Default is enabled, set to <code>false</code> to disable.</dd>
            </dl>
          </dd>
          <dt><code>capwap</code></dt>
          <dd>Ethernet tunneling over the UDP transport portion of CAPWAP
             (RFC 5415).  This allows interoperability with certain switches
             where GRE is not available.  Note that only the tunneling component
             of the protocol is implemented.  Due to the non-standard use of
             CAPWAP, UDP ports 58881 and 58882 are used as the source and
             destination ports respectively.  Each tunnel must be uniquely
             identified by the combination of <code>remote_ip</code> and
             <code>local_ip</code>.  If two ports are defined that are the same
             except one includes <code>local_ip</code> and the other does not,
             the more specific one is matched first.  CAPWAP support is not
             available on all platforms.  Currently it is only supported in the
             Linux kernel module with kernel versions >= 2.6.25.  The following
             options may be specified in the <ref column="options"/> column:
            <dl>
              <dt><code>remote_ip</code></dt>
              <dd>Required.  The tunnel endpoint.</dd>
            </dl>
            <dl>
              <dt><code>local_ip</code></dt>
              <dd>Optional.  The destination IP that received packets must
                match.  Default is to match all addresses.</dd>
            </dl>
            <dl>
              <dt><code>tos</code></dt>
              <dd>Optional.  The value of the ToS bits to be set on the
                encapsulating packet.  It may also be the word
                <code>inherit</code>, in which case the ToS will be copied from
                the inner packet if it is IPv4 or IPv6 (otherwise it will be
                0).  Note that the ECN fields are always inherited.  Default is
                0.</dd>
            </dl>
            <dl>
              <dt><code>ttl</code></dt>
              <dd>Optional.  The TTL to be set on the encapsulating packet.
                It may also be the word <code>inherit</code>, in which case the
                TTL will be copied from the inner packet if it is IPv4 or IPv6
                (otherwise it will be the system default, typically 64).
                Default is the system default TTL.</dd>
            </dl>
            <dl>
              <dt><code>pmtud</code></dt>
              <dd>Optional.  Enable tunnel path MTU discovery.  If enabled
                ``ICMP destination unreachable - fragmentation'' needed
                messages will be generated for IPv4 packets with the DF bit set
                and IPv6 packets above the minimum MTU if the packet size
                exceeds the path MTU minus the size of the tunnel headers.  It
                also forces the encapsulating packet DF bit to be set (it is
                always set if the inner packet implies path MTU discovery).
                Note that this option causes behavior that is typically
                reserved for routers and therefore is not entirely in
                compliance with the IEEE 802.1D specification for bridges.
                Default is enabled, set to <code>false</code> to disable.</dd>
            </dl>
            <dl>
              <dt><code>header_cache</code></dt>
              <dd>Optional.  Enable caching of tunnel headers and the output
                path.  This can lead to a significant performance increase
                without changing behavior.  In general it should not be
                necessary to adjust this setting.  However, the caching can
                bypass certain components of the IP stack (such as IP tables)
                and it may be useful to disable it if these features are
                required or as a debugging measure.  Default is enabled, set to
                <code>false</code> to disable.</dd>
            </dl>
          </dd>
          <dt><code>patch</code></dt>
          <dd>
            <p>
              A pair of virtual devices that act as a patch cable.  The <ref
              column="options"/> column must have the following key-value pair:
            </p>
            <dl>
              <dt><code>peer</code></dt>
              <dd>
                The <ref column="name"/> of the <ref table="Interface"/> for
                the other side of the patch.  The named <ref
                table="Interface"/>'s own <code>peer</code> option must specify
                this <ref table="Interface"/>'s name.  That is, the two patch
                interfaces must have reversed <ref column="name"/> and
                <code>peer</code> values.
              </dd>
            </dl>
          </dd>
        </dl>
      </column>

      <column name="options">
        Configuration options whose interpretation varies based on
        <ref column="type"/>.
      </column>
    </group>

    <group title="Interface Status">
      <p>
        Status information about interfaces attached to bridges, updated every
        5 seconds.  Not all interfaces have all of these properties; virtual
        interfaces don't have a link speed, for example.  Non-applicable
        columns will have empty values.
      </p>
      <column name="admin_state">
        <p>
          The administrative state of the physical network link.
        </p>
      </column>

      <column name="link_state">
        <p>
          The observed state of the physical network link.  This is ordinarily
          the link's carrier status.  If the interface's <ref table="Port"/> is
          a bond configured for miimon monitoring, it is instead the network
          link's miimon status.
        </p>
      </column>

      <column name="link_speed">
        <p>
          The negotiated speed of the physical network link.
          Valid values are positive integers greater than 0.
        </p>
      </column>

      <column name="duplex">
        <p>
          The duplex mode of the physical network link.
        </p>
      </column>

      <column name="mtu">
        <p>
          The MTU (maximum transmission unit); i.e. the largest
          amount of data that can fit into a single Ethernet frame.
          The standard Ethernet MTU is 1500 bytes.  Some physical media
          and many kinds of virtual interfaces can be configured with
          higher MTUs.
        </p>
        <p>
          This column will be empty for an interface that does not
          have an MTU as, for example, some kinds of tunnels do not.
        </p>
      </column>

      <column name="status">
        <p>
          Key-value pairs that report port status.  Supported status
          values are <code>type</code>-dependent; some interfaces may not have
          a valid <code>driver_name</code>, for example.
        </p>
        <p>The currently defined key-value pairs are:</p>
        <dl>
          <dt><code>driver_name</code></dt>
          <dd>The name of the device driver controlling the network
            adapter.</dd>
        </dl>
        <dl>
          <dt><code>driver_version</code></dt>
          <dd>The version string of the device driver controlling the
            network adapter.</dd>
        </dl>
        <dl>
          <dt><code>firmware_version</code></dt>
          <dd>The version string of the network adapter's firmware, if
            available.</dd>
        </dl>
        <dl>
          <dt><code>source_ip</code></dt>
          <dd>The source IP address used for an IPv4 tunnel end-point,
            such as <code>gre</code> or <code>capwap</code>.</dd>
        </dl>
        <dl>
            <dt><code>tunnel_egress_iface</code></dt>
            <dd>Egress interface for tunnels.  Currently only relevant for GRE
                and CAPWAP tunnels.  On Linux systems, this column will show
                the name of the interface which is responsible for routing
                traffic destined for the configured <code>remote_ip</code>.
                This could be an internal interface such as a bridge port.</dd>
        </dl>
        <dl>
            <dt><code>tunnel_egress_iface_carrier</code></dt>
            <dd>Whether a carrier is detected on <ref
            column="tunnel_egress_iface"/>.  Valid values are <code>down</code>
            and <code>up</code>.</dd>
        </dl>
      </column>
    </group>

    <group title="Ingress Policing">
      <p>
        These settings control ingress policing for packets received on this
        interface.  On a physical interface, this limits the rate at which
        traffic is allowed into the system from the outside; on a virtual
        interface (one connected to a virtual machine), this limits the rate at
        which the VM is able to transmit.
      </p>
      <p>
        Policing is a simple form of quality-of-service that simply drops
        packets received in excess of the configured rate.  Due to its
        simplicity, policing is usually less accurate and less effective than
        egress QoS (which is configured using the <ref table="QoS"/> and <ref
        table="Queue"/> tables).
      </p>
      <p>
        Policing is currently implemented only on Linux.  The Linux
        implementation uses a simple ``token bucket'' approach:
      </p>
      <ul>
        <li>
          The size of the bucket corresponds to <ref
          column="ingress_policing_burst"/>.  Initially the bucket is full.
        </li>
        <li>
          Whenever a packet is received, its size (converted to tokens) is
          compared to the number of tokens currently in the bucket.  If the
          required number of tokens are available, they are removed and the
          packet is forwarded.  Otherwise, the packet is dropped.
        </li>
        <li>
          Whenever it is not full, the bucket is refilled with tokens at the
          rate specified by <ref column="ingress_policing_rate"/>.
        </li>
      </ul>
      <p>
        Policing interacts badly with some network protocols, and especially
        with fragmented IP packets.  Suppose that there is enough network
        activity to keep the bucket nearly empty all the time.  Then this token
        bucket algorithm will forward a single packet every so often, with the
        period depending on packet size and on the configured rate.  All of the
        fragments of an IP packets are normally transmitted back-to-back, as a
        group.  In such a situation, therefore, only one of these fragments
        will be forwarded and the rest will be dropped.  IP does not provide
        any way for the intended recipient to ask for only the remaining
        fragments.  In such a case there are two likely possibilities for what
        will happen next: either all of the fragments will eventually be
        retransmitted (as TCP will do), in which case the same problem will
        recur, or the sender will not realize that its packet has been dropped
        and data will simply be lost (as some UDP-based protocols will do).
        Either way, it is possible that no forward progress will ever occur.
      </p>
      <column name="ingress_policing_rate">
        <p>
          Maximum rate for data received on this interface, in kbps.  Data
          received faster than this rate is dropped.  Set to <code>0</code>
          (the default) to disable policing.
        </p>
      </column>

      <column name="ingress_policing_burst">
        <p>Maximum burst size for data received on this interface, in kb.  The
          default burst size if set to <code>0</code> is 1000 kb.  This value
          has no effect if <ref column="ingress_policing_rate"/>
          is <code>0</code>.</p>
        <p>
          Specifying a larger burst size lets the algorithm be more forgiving,
          which is important for protocols like TCP that react severely to
          dropped packets.  The burst size should be at least the size of the
          interface's MTU.  Specifying a value that is numerically at least as
          large as 10% of <ref column="ingress_policing_rate"/> helps TCP come
          closer to achieving the full rate.
        </p>
      </column>
    </group>

    <group title="Other Features">

      <column name="monitor">
        Connectivity monitor configuration for this interface.
      </column>

      <column name="external_ids">
        Key-value pairs for use by external frameworks that integrate
        with Open vSwitch, rather than by Open vSwitch itself.  System
        integrators should either use the Open vSwitch development
        mailing list to coordinate on common key-value definitions, or
        choose key names that are likely to be unique.  The currently
        defined common key-value pairs are:
        <dl>
          <dt><code>attached-mac</code></dt>
          <dd>
            The MAC address programmed into the ``virtual hardware'' for this
            interface, in the form
            <var>xx</var>:<var>xx</var>:<var>xx</var>:<var>xx</var>:<var>xx</var>:<var>xx</var>.
            For Citrix XenServer, this is the value of the <code>MAC</code>
            field in the VIF record for this interface.</dd>
          <dt><code>iface-id</code></dt>
          <dd>A system-unique identifier for the interface.  On XenServer,
            this will commonly be the same as <code>xs-vif-uuid</code>.</dd>
        </dl>
        <p>
          Additionally the following key-value pairs specifically
          apply to an interface that represents a virtual Ethernet interface
          connected to a virtual machine.  These key-value pairs should not be
          present for other types of interfaces.  Keys whose names end
          in <code>-uuid</code> have values that uniquely identify the entity
          in question.  For a Citrix XenServer hypervisor, these values are
          UUIDs in RFC 4122 format.  Other hypervisors may use other
          formats.
        </p>
        <p>The currently defined key-value pairs for XenServer are:</p>
        <dl>
          <dt><code>xs-vif-uuid</code></dt>
          <dd>The virtual interface associated with this interface.</dd>
          <dt><code>xs-network-uuid</code></dt>
          <dd>The virtual network to which this interface is attached.</dd>
          <dt><code>xs-vm-uuid</code></dt>
          <dd>The VM to which this interface belongs.</dd>
        </dl>
      </column>

      <column name="other_config">
        Key-value pairs for rarely used interface features.
        <dl>
          <dt><code>lacp-port-priority</code></dt>
          <dd> The LACP port priority of this <ref table="Interface"/>.  In
            LACP negotiations <ref table="Interface"/>s with numerically lower
            priorities are preferred for aggregation.  Must be a number between
            1 and 65535.</dd>
        </dl>
      </column>

      <column name="statistics">
        <p>
          Key-value pairs that report interface statistics.  The current
          implementation updates these counters periodically.  In the future,
          we plan to, instead, update them when an interface is created, when
          they are queried (e.g. using an OVSDB <code>select</code> operation),
          and just before an interface is deleted due to virtual interface
          hot-unplug or VM shutdown, and perhaps at other times, but not on any
          regular periodic basis.</p>
        <p>
          The currently defined key-value pairs are listed below.  These are
          the same statistics reported by OpenFlow in its <code>struct
          ofp_port_stats</code> structure.  If an interface does not support a
          given statistic, then that pair is omitted.</p>
        <ul>
          <li>
            Successful transmit and receive counters:
            <dl>
              <dt><code>rx_packets</code></dt>
              <dd>Number of received packets.</dd>
              <dt><code>rx_bytes</code></dt>
              <dd>Number of received bytes.</dd>
              <dt><code>tx_packets</code></dt>
              <dd>Number of transmitted packets.</dd>
              <dt><code>tx_bytes</code></dt>
              <dd>Number of transmitted bytes.</dd>
            </dl>
          </li>
          <li>
            Receive errors:
            <dl>
              <dt><code>rx_dropped</code></dt>
              <dd>Number of packets dropped by RX.</dd>
              <dt><code>rx_frame_err</code></dt>
              <dd>Number of frame alignment errors.</dd>
              <dt><code>rx_over_err</code></dt>
              <dd>Number of packets with RX overrun.</dd>
              <dt><code>rx_crc_err</code></dt>
              <dd>Number of CRC errors.</dd>
              <dt><code>rx_errors</code></dt>
              <dd>
                Total number of receive errors, greater than or equal
                to the sum of the above.
              </dd>
            </dl>
          </li>
          <li>
            Transmit errors:
            <dl>
              <dt><code>tx_dropped</code></dt>
              <dd>Number of packets dropped by TX.</dd>
              <dt><code>collisions</code></dt>
              <dd>Number of collisions.</dd>
              <dt><code>tx_errors</code></dt>
              <dd>
                Total number of transmit errors, greater
                than or equal to the sum of the above.
              </dd>
            </dl>
          </li>
        </ul>
      </column>
    </group>
  </table>

  <table name="QoS" title="Quality of Service configuration">
    <p>Quality of Service (QoS) configuration for each Port that
      references it.</p>

    <column name="type">
      <p>The type of QoS to implement.  The <ref table="Open_vSwitch"
        column="capabilities"/> column in the <ref table="Open_vSwitch"/> table
        identifies the types that a switch actually supports.  The currently
        defined types are listed below:</p>
      <dl>
        <dt><code>linux-htb</code></dt>
        <dd>
          Linux ``hierarchy token bucket'' classifier.  See tc-htb(8) (also at
          <code>http://linux.die.net/man/8/tc-htb</code>) and the HTB manual
          (<code>http://luxik.cdi.cz/~devik/qos/htb/manual/userg.htm</code>)
          for information on how this classifier works and how to configure it.
        </dd>
      </dl>
      <dl>
        <dt><code>linux-hfsc</code></dt>
        <dd>
          Linux "Hierarchical Fair Service Curve" classifier.
          See <code>http://linux-ip.net/articles/hfsc.en/</code> for
          information on how this classifier works.
        </dd>
      </dl>
    </column>

    <column name="queues">
      <p>A map from queue numbers to <ref table="Queue"/> records.  The
        supported range of queue numbers depend on <ref column="type"/>.  The
        queue numbers are the same as the <code>queue_id</code> used in
        OpenFlow in <code>struct ofp_action_enqueue</code> and other
        structures.  Queue 0 is used by OpenFlow output actions that do not
        specify a specific queue.</p>
    </column>

    <column name="other_config">
      <p>Key-value pairs for configuring QoS features that depend on
        <ref column="type"/>.</p>
      <p>The <code>linux-htb</code> and <code>linux-hfsc</code> classes support
          the following key-value pairs:</p>
      <dl>
        <dt><code>max-rate</code></dt>
        <dd>Maximum rate shared by all queued traffic, in bit/s.
          Optional.  If not specified, for physical interfaces, the
          default is the link rate.  For other interfaces or if the
          link rate cannot be determined, the default is currently 100
          Mbps.</dd>
      </dl>
    </column>

    <column name="external_ids">
      Key-value pairs for use by external frameworks that integrate with Open
      vSwitch, rather than by Open vSwitch itself.  System integrators should
      either use the Open vSwitch development mailing list to coordinate on
      common key-value definitions, or choose key names that are likely to be
      unique.  No common key-value pairs are currently defined.
    </column>
  </table>

  <table name="Queue" title="QoS output queue.">
    <p>A configuration for a port output queue, used in configuring Quality of
      Service (QoS) features.  May be referenced by <ref column="queues"
      table="QoS"/> column in <ref table="QoS"/> table.</p>

    <column name="other_config">
      <p>Key-value pairs for configuring the output queue.  The supported
        key-value pairs and their meanings depend on the <ref column="type"/>
        of the <ref column="QoS"/> records that reference this row.</p>
      <p>The key-value pairs defined for <ref table="QoS"/> <ref table="QoS"
        column="type"/> of <code>min-rate</code> are:</p>
      <dl>
        <dt><code>min-rate</code></dt>
        <dd>Minimum guaranteed bandwidth, in bit/s.  Required.  The
          floor value is 1500 bytes/s (12,000 bit/s).</dd>
      </dl>
      <p>The key-value pairs defined for <ref table="QoS"/> <ref table="QoS"
        column="type"/> of <code>linux-htb</code> are:</p>
      <dl>
        <dt><code>min-rate</code></dt>
        <dd>Minimum guaranteed bandwidth, in bit/s.</dd>
        <dt><code>max-rate</code></dt>
        <dd>Maximum allowed bandwidth, in bit/s.  Optional.  If specified, the
          queue's rate will not be allowed to exceed the specified value, even
          if excess bandwidth is available.  If unspecified, defaults to no
          limit.</dd>
        <dt><code>burst</code></dt>
        <dd>Burst size, in bits.  This is the maximum amount of ``credits''
          that a queue can accumulate while it is idle.  Optional.  Details of
          the <code>linux-htb</code> implementation require a minimum burst
          size, so a too-small <code>burst</code> will be silently
          ignored.</dd>
        <dt><code>priority</code></dt>
        <dd>A nonnegative 32-bit integer.  Defaults to 0 if
          unspecified.  A queue with a smaller <code>priority</code>
          will receive all the excess bandwidth that it can use before
          a queue with a larger value receives any.  Specific priority
          values are unimportant; only relative ordering matters.</dd>
      </dl>
      <p>The key-value pairs defined for <ref table="QoS"/> <ref table="QoS"
        column="type"/> of <code>linux-hfsc</code> are:</p>
      <dl>
        <dt><code>min-rate</code></dt>
        <dd>Minimum guaranteed bandwidth, in bit/s.</dd>
        <dt><code>max-rate</code></dt>
        <dd>Maximum allowed bandwidth, in bit/s.  Optional.  If specified, the
          queue's rate will not be allowed to exceed the specified value, even
          if excess bandwidth is available.  If unspecified, defaults to no
          limit.</dd>
      </dl>
    </column>

    <column name="external_ids">
      Key-value pairs for use by external frameworks that integrate with Open
      vSwitch, rather than by Open vSwitch itself.  System integrators should
      either use the Open vSwitch development mailing list to coordinate on
      common key-value definitions, or choose key names that are likely to be
      unique.  No common key-value pairs are currently defined.
    </column>
  </table>

  <table name="Monitor" title="Connectivity Monitor configuration">
    <p>
      A <ref table="Monitor"/> attaches to an <ref table="Interface"/> to
      implement 802.1ag Connectivity Fault Management (CFM).  CFM allows a
      group of Maintenance Points (MPs) called a Maintenance Association (MA)
      to detect connectivity problems with each other.  MPs within a MA should
      have complete and exclusive interconnectivity.  This is verified by
      occasionally broadcasting Continuity Check Messages (CCMs) at a
      configurable transmission interval.  A <ref table="Monitor"/> is
      responsible for collecting data about other MPs in its MA and
      broadcasting CCMs.
    </p>

    <group title="Monitor Configuration">
      <column name="mpid">
        A Maintenance Point ID (MPID) uniquely identifies each endpoint within
        a Maintenance Association (see <ref column="ma_name"/>).  The MPID is
        used to identify this <ref table="Monitor"/> to other endpoints in the
        MA.
      </column>

      <column name="remote_mps">
        A set of <ref table="Maintenance_Points"/> which this
        <ref table="Monitor"/> should have connectivity to.  If this
        <ref table="Monitor"/> does not have connectivity to any MPs in this
        set, or has connectivity to any MPs not in this set, a fault is
        signaled.
      </column>

      <column name="ma_name">
        A Maintenance Association (MA) name pairs with a Maintenance Domain
        (MD) name to uniquely identify a MA.  A MA is a group of endpoints who
        have complete and exclusive interconnectivity. Defaults to
        <code>ovs</code> if unset.
      </column>

      <column name="md_name">
        A Maintenance Domain name pairs with a Maintenance Association name to
        uniquely identify a MA. Defaults to <code>ovs</code> if unset.
      </column>

      <column name="interval">
        The transmission interval of CCMs in milliseconds.  Three missed CCMs
        indicate a connectivity fault.  Defaults to 1000ms.
      </column>
    </group>

    <group title="Monitor Status">
      <column name="fault">
        Indicates a Connectivity Fault caused by a configuration error, a down
        remote MP, or unexpected connectivity to a remote MAID or remote MP.
      </column>
    </group>
  </table>

  <table name="Maintenance_Point" title="Maintenance Point configuration">
    <p>
      A <ref table="Maintenance_Point"/> represents a MP which a
      <ref table="Monitor"/> has or should have connectivity to.
    </p>

    <group title="Maintenance_Point Configuration">
      <column name="mpid">
        A Maintenance Point ID (MPID) uniquely identifies each endpoint within
        a Maintenance Association. All MPs within a MA should have a unique
        MPID.
      </column>
    </group>

    <group title="Maintenance_Point Status">
      <column name="fault">
        Indicates a connectivity fault.
      </column>
    </group>
  </table>

  <table name="Mirror" title="Port mirroring (SPAN/RSPAN).">
    <p>A port mirror within a <ref table="Bridge"/>.</p>
    <p>A port mirror configures a bridge to send selected frames to special
      ``mirrored'' ports, in addition to their normal destinations.  Mirroring
      traffic may also be referred to as SPAN or RSPAN, depending on the
      mechanism used for delivery.</p>

    <column name="name">
      Arbitrary identifier for the <ref table="Mirror"/>.
    </column>

    <group title="Selecting Packets for Mirroring">
      <p>
        To be selected for mirroring, a given packet must enter or leave the
        bridge through a selected port and it must also be in one of the
        selected VLANs.
      </p>

      <column name="select_all">
        If true, every packet arriving or departing on any port is
        selected for mirroring.
      </column>

      <column name="select_dst_port">
        Ports on which departing packets are selected for mirroring.
      </column>

      <column name="select_src_port">
        Ports on which arriving packets are selected for mirroring.
      </column>

      <column name="select_vlan">
        VLANs on which packets are selected for mirroring.  An empty set
        selects packets on all VLANs.
      </column>
    </group>

    <group title="Mirroring Destination Configuration">
      <p>
        These columns are mutually exclusive.  Exactly one of them must be
        nonempty.
      </p>

      <column name="output_port">
        <p>Output port for selected packets, if nonempty.</p>
        <p>Specifying a port for mirror output reserves that port exclusively
          for mirroring.  No frames other than those selected for mirroring
          will be forwarded to the port, and any frames received on the port
          will be discarded.</p>
        <p>This type of mirroring is sometimes called SPAN.</p>
      </column>

      <column name="output_vlan">
        <p>Output VLAN for selected packets, if nonempty.</p>
        <p>The frames will be sent out all ports that trunk
          <ref column="output_vlan"/>, as well as any ports with implicit VLAN
          <ref column="output_vlan"/>.  When a mirrored frame is sent out a
          trunk port, the frame's VLAN tag will be set to
          <ref column="output_vlan"/>, replacing any existing tag; when it is
          sent out an implicit VLAN port, the frame will not be tagged.  This
          type of mirroring is sometimes called RSPAN.</p>
        <p><em>Please note:</em> Mirroring to a VLAN can disrupt a network that
          contains unmanaged switches.  Consider an unmanaged physical switch
          with two ports: port 1, connected to an end host, and port 2,
          connected to an Open vSwitch configured to mirror received packets
          into VLAN 123 on port 2.  Suppose that the end host sends a packet on
          port 1 that the physical switch forwards to port 2.  The Open vSwitch
          forwards this packet to its destination and then reflects it back on
          port 2 in VLAN 123.  This reflected packet causes the unmanaged
          physical switch to replace the MAC learning table entry, which
          correctly pointed to port 1, with one that incorrectly points to port
          2.  Afterward, the physical switch will direct packets destined for
          the end host to the Open vSwitch on port 2, instead of to the end
          host on port 1, disrupting connectivity.  If mirroring to a VLAN is
          desired in this scenario, then the physical switch must be replaced
          by one that learns Ethernet addresses on a per-VLAN basis.  In
          addition, learning should be disabled on the VLAN containing mirrored
          traffic. If this is not done then intermediate switches will learn
          the MAC address of each end host from the mirrored traffic.  If
          packets being sent to that end host are also mirrored, then they will
          be dropped since the switch will attempt to send them out the input
          port. Disabling learning for the VLAN will cause the switch to
          correctly send the packet out all ports configured for that VLAN.  If
          Open vSwitch is being used as an intermediate switch, learning can be
          disabled by adding the mirrored VLAN to <ref column="flood_vlans"/>
          in the appropriate <ref table="Bridge"/> table or tables.</p>
      </column>
    </group>

    <group title="Other Features">
      <column name="external_ids">
        Key-value pairs for use by external frameworks that integrate with Open
        vSwitch, rather than by Open vSwitch itself.  System integrators should
        either use the Open vSwitch development mailing list to coordinate on
        common key-value definitions, or choose key names that are likely to be
        unique.  No common key-value pairs are currently defined.
      </column>
    </group>
  </table>

  <table name="Controller" title="OpenFlow controller configuration.">
    <p>An OpenFlow controller.</p>

    <p>
      Open vSwitch supports two kinds of OpenFlow controllers:
    </p>

    <dl>
      <dt>Primary controllers</dt>
      <dd>
        <p>
          This is the kind of controller envisioned by the OpenFlow 1.0
          specification.  Usually, a primary controller implements a network
          policy by taking charge of the switch's flow table.
        </p>

        <p>
          Open vSwitch initiates and maintains persistent connections to
          primary controllers, retrying the connection each time it fails or
          drops.  The <ref table="Bridge" column="fail_mode"/> column in the
          <ref table="Bridge"/> table applies to primary controllers.
        </p>

        <p>
          Open vSwitch permits a bridge to have any number of primary
          controllers.  When multiple controllers are configured, Open
          vSwitch connects to all of them simultaneously.  Because
          OpenFlow 1.0 does not specify how multiple controllers
          coordinate in interacting with a single switch, more than
          one primary controller should be specified only if the
          controllers are themselves designed to coordinate with each
          other.  (The Nicira-defined <code>NXT_ROLE</code> OpenFlow
          vendor extension may be useful for this.)
        </p>
      </dd>
      <dt>Service controllers</dt>
      <dd>
        <p>
          These kinds of OpenFlow controller connections are intended for
          occasional support and maintenance use, e.g. with
          <code>ovs-ofctl</code>.  Usually a service controller connects only
          briefly to inspect or modify some of a switch's state.
        </p>

        <p>
          Open vSwitch listens for incoming connections from service
          controllers.  The service controllers initiate and, if necessary,
          maintain the connections from their end.  The <ref table="Bridge"
          column="fail_mode"/> column in the <ref table="Bridge"/> table does
          not apply to service controllers.
        </p>

        <p>
          Open vSwitch supports configuring any number of service controllers.
        </p>
      </dd>
    </dl>

    <p>
      The <ref column="target"/> determines the type of controller.
    </p>

    <group title="Core Features">
      <column name="target">
        <p>Connection method for controller.</p>
        <p>
          The following connection methods are currently supported for primary
          controllers:
        </p>
        <dl>
          <dt><code>ssl:<var>ip</var></code>[<code>:<var>port</var></code>]</dt>
          <dd>
            <p>The specified SSL <var>port</var> (default: 6633) on the host at
            the given <var>ip</var>, which must be expressed as an IP address
            (not a DNS name).  The <ref table="Open_vSwitch" column="ssl"/>
            column in the <ref table="Open_vSwitch"/> table must point to a
            valid SSL configuration when this form is used.</p>
            <p>SSL support is an optional feature that is not always built as
              part of Open vSwitch.</p>
          </dd>
          <dt><code>tcp:<var>ip</var></code>[<code>:<var>port</var></code>]</dt>
          <dd>The specified TCP <var>port</var> (default: 6633) on the host at
            the given <var>ip</var>, which must be expressed as an IP address
            (not a DNS name).</dd>
        </dl>
        <p>
          The following connection methods are currently supported for service
          controllers:
        </p>
        <dl>
          <dt><code>pssl:</code>[<var>port</var>][<code>:<var>ip</var></code>]</dt>
          <dd>
            <p>
              Listens for SSL connections on the specified TCP <var>port</var>
              (default: 6633).  If <var>ip</var>, which must be expressed as an
              IP address (not a DNS name), is specified, then connections are
              restricted to the specified local IP address.
            </p>
            <p>
              The <ref table="Open_vSwitch" column="ssl"/> column in the <ref
              table="Open_vSwitch"/> table must point to a valid SSL
              configuration when this form is used.
            </p>
            <p>SSL support is an optional feature that is not always built as
              part of Open vSwitch.</p>
          </dd>
          <dt><code>ptcp:</code>[<var>port</var>][<code>:<var>ip</var></code>]</dt>
          <dd>
            Listens for connections on the specified TCP <var>port</var>
            (default: 6633).  If <var>ip</var>, which must be expressed as an
            IP address (not a DNS name), is specified, then connections are
            restricted to the specified local IP address.
          </dd>
        </dl>
        <p>When multiple controllers are configured for a single bridge, the
          <ref column="target"/> values must be unique.  Duplicate
          <ref column="target"/> values yield unspecified results.</p>
      </column>

      <column name="connection_mode">
        <p>If it is specified, this setting must be one of the following
        strings that describes how Open vSwitch contacts this OpenFlow
        controller over the network:</p>

        <dl>
          <dt><code>in-band</code></dt>
          <dd>In this mode, this controller's OpenFlow traffic travels over the
            bridge associated with the controller.  With this setting, Open
            vSwitch allows traffic to and from the controller regardless of the
            contents of the OpenFlow flow table.  (Otherwise, Open vSwitch
            would never be able to connect to the controller, because it did
            not have a flow to enable it.)  This is the most common connection
            mode because it is not necessary to maintain two independent
            networks.</dd>
          <dt><code>out-of-band</code></dt>
          <dd>In this mode, OpenFlow traffic uses a control network separate
            from the bridge associated with this controller, that is, the
            bridge does not use any of its own network devices to communicate
            with the controller.  The control network must be configured
            separately, before or after <code>ovs-vswitchd</code> is started.
          </dd>
        </dl>

        <p>If not specified, the default is implementation-specific.</p>
      </column>
    </group>

    <group title="Controller Failure Detection and Handling">
      <column name="max_backoff">
        Maximum number of milliseconds to wait between connection attempts.
        Default is implementation-specific.
      </column>

      <column name="inactivity_probe">
        Maximum number of milliseconds of idle time on connection to
        controller before sending an inactivity probe message.  If Open
        vSwitch does not communicate with the controller for the specified
        number of seconds, it will send a probe.  If a response is not
        received for the same additional amount of time, Open vSwitch
        assumes the connection has been broken and attempts to reconnect.
        Default is implementation-specific.  A value of 0 disables
        inactivity probes.
      </column>
    </group>

    <group title="OpenFlow Rate Limiting">
        <column name="controller_rate_limit">
          <p>The maximum rate at which packets in unknown flows will be
            forwarded to the OpenFlow controller, in packets per second.  This
            feature prevents a single bridge from overwhelming the controller.
            If not specified, the default is implementation-specific.</p>
          <p>In addition, when a high rate triggers rate-limiting, Open
            vSwitch queues controller packets for each port and transmits
            them to the controller at the configured rate.  The number of
            queued packets is limited by
            the <ref column="controller_burst_limit"/> value.  The packet
            queue is shared fairly among the ports on a bridge.</p><p>Open
            vSwitch maintains two such packet rate-limiters per bridge.
            One of these applies to packets sent up to the controller
            because they do not correspond to any flow.  The other applies
            to packets sent up to the controller by request through flow
            actions. When both rate-limiters are filled with packets, the
            actual rate that packets are sent to the controller is up to
            twice the specified rate.</p>
        </column>

        <column name="controller_burst_limit">
          In conjunction with <ref column="controller_rate_limit"/>,
          the maximum number of unused packet credits that the bridge will
          allow to accumulate, in packets.  If not specified, the default
          is implementation-specific.
        </column>
    </group>

    <group title="Additional In-Band Configuration">
      <p>These values are considered only in in-band control mode (see
        <ref column="connection_mode"/>).</p>

      <p>When multiple controllers are configured on a single bridge, there
        should be only one set of unique values in these columns.  If different
        values are set for these columns in different controllers, the effect
        is unspecified.</p>

      <column name="local_ip">
        The IP address to configure on the local port,
        e.g. <code>192.168.0.123</code>.  If this value is unset, then
        <ref column="local_netmask"/> and <ref column="local_gateway"/> are
        ignored.
      </column>

      <column name="local_netmask">
        The IP netmask to configure on the local port,
        e.g. <code>255.255.255.0</code>.  If <ref column="local_ip"/> is set
        but this value is unset, then the default is chosen based on whether
        the IP address is class A, B, or C.
      </column>

      <column name="local_gateway">
        The IP address of the gateway to configure on the local port, as a
        string, e.g. <code>192.168.0.1</code>.  Leave this column unset if
        this network has no gateway.
      </column>
    </group>

    <group title="Other Features">
      <column name="external_ids">
        Key-value pairs for use by external frameworks that integrate with Open
        vSwitch, rather than by Open vSwitch itself.  System integrators should
        either use the Open vSwitch development mailing list to coordinate on
        common key-value definitions, or choose key names that are likely to be
        unique.  No common key-value pairs are currently defined.
      </column>
    </group>

    <group title="Controller Status">
      <column name="is_connected">
        <code>true</code> if currently connected to this controller,
        <code>false</code> otherwise.
      </column>

      <column name="role">
        <p>The level of authority this controller has on the associated
          bridge. Possible values are:</p>
        <dl>
          <dt><code>other</code></dt>
          <dd>Allows the controller access to all OpenFlow features.</dd>
          <dt><code>master</code></dt>
          <dd>Equivalent to <code>other</code>, except that there may be at
            most one master controller at a time.  When a controller configures
            itself as <code>master</code>, any existing master is demoted to
            the <code>slave</code>role.</dd>
          <dt><code>slave</code></dt>
          <dd>Allows the controller read-only access to OpenFlow features.
            Attempts to modify the flow table will be rejected with an
            error.  Slave controllers do not receive OFPT_PACKET_IN or
            OFPT_FLOW_REMOVED messages, but they do receive OFPT_PORT_STATUS
            messages.</dd>
        </dl>
      </column>

      <column name="status">
        <p>Key-value pairs that report controller status.</p>
        <dl>
          <dt><code>last_error</code></dt>
          <dd>A human-readable description of the last error on the connection
            to the controller; i.e. <code>strerror(errno)</code>.  This key
            will exist only if an error has occurred.</dd>
          <dt><code>state</code></dt>
          <dd>The state of the connection to the controller.  Possible values
            are: <code>VOID</code> (connection is disabled),
            <code>BACKOFF</code> (attempting to reconnect at an increasing
            period), <code>CONNECTING</code> (attempting to connect),
            <code>ACTIVE</code> (connected, remote host responsive), and
            <code>IDLE</code> (remote host idle, sending keep-alive).  These
            values may change in the future.  They are provided only for human
            consumption.</dd>
          <dt><code>sec_since_connect</code></dt>
          <dd>The amount of time since this controller last successfully
            connected to the switch (in seconds). Value is empty if controller
            has never successfully connected.</dd>
          <dt><code>sec_since_disconnect</code></dt>
          <dd>The amount of time since this controller last disconnected from
            the switch (in seconds). Value is empty if controller has never
            disconnected.</dd>
        </dl>
      </column>
    </group>
  </table>

  <table name="Manager" title="OVSDB management connection.">
    <p>
      Configuration for a database connection to an Open vSwitch database
      (OVSDB) client.
    </p>

    <p>
      This table primarily configures the Open vSwitch database
      (<code>ovsdb-server</code>), not the Open vSwitch switch
      (<code>ovs-vswitchd</code>).  The switch does read the table to determine
      what connections should be treated as in-band.
    </p>

    <p>
      The Open vSwitch database server can initiate and maintain active
      connections to remote clients.  It can also listen for database
      connections.
    </p>

    <group title="Core Features">
      <column name="target">
        <p>Connection method for managers.</p>
        <p>
          The following connection methods are currently supported:
        </p>
        <dl>
          <dt><code>ssl:<var>ip</var></code>[<code>:<var>port</var></code>]</dt>
          <dd>
            <p>
              The specified SSL <var>port</var> (default: 6632) on the host at
              the given <var>ip</var>, which must be expressed as an IP address
              (not a DNS name).  The <ref table="Open_vSwitch" column="ssl"/>
              column in the <ref table="Open_vSwitch"/> table must point to a
              valid SSL configuration when this form is used.
            </p>
            <p>
              SSL support is an optional feature that is not always built as
              part of Open vSwitch.
            </p>
          </dd>

          <dt><code>tcp:<var>ip</var></code>[<code>:<var>port</var></code>]</dt>
          <dd>
            The specified TCP <var>port</var> (default: 6632) on the host at
            the given <var>ip</var>, which must be expressed as an IP address
            (not a DNS name).
          </dd>
          <dt><code>pssl:</code>[<var>port</var>][<code>:<var>ip</var></code>]</dt>
          <dd>
            <p>
              Listens for SSL connections on the specified TCP <var>port</var>
              (default: 6632).  If <var>ip</var>, which must be expressed as an
              IP address (not a DNS name), is specified, then connections are
              restricted to the specified local IP address.
            </p>
            <p>
              The <ref table="Open_vSwitch" column="ssl"/> column in the <ref
              table="Open_vSwitch"/> table must point to a valid SSL
              configuration when this form is used.
            </p>
            <p>
              SSL support is an optional feature that is not always built as
              part of Open vSwitch.
            </p>
          </dd>
          <dt><code>ptcp:</code>[<var>port</var>][<code>:<var>ip</var></code>]</dt>
          <dd>
            Listens for connections on the specified TCP <var>port</var>
            (default: 6632).  If <var>ip</var>, which must be expressed as an
            IP address (not a DNS name), is specified, then connections are
            restricted to the specified local IP address.
          </dd>
        </dl>
        <p>When multiple managers are configured, the <ref column="target"/>
        values must be unique.  Duplicate <ref column="target"/> values yield
        unspecified results.</p>
      </column>

      <column name="connection_mode">
        <p>
          If it is specified, this setting must be one of the following strings
          that describes how Open vSwitch contacts this OVSDB client over the
          network:
        </p>

        <dl>
          <dt><code>in-band</code></dt>
          <dd>
            In this mode, this connection's traffic travels over a bridge
            managed by Open vSwitch.  With this setting, Open vSwitch allows
            traffic to and from the client regardless of the contents of the
            OpenFlow flow table.  (Otherwise, Open vSwitch would never be able
            to connect to the client, because it did not have a flow to enable
            it.)  This is the most common connection mode because it is not
            necessary to maintain two independent networks.
          </dd>
          <dt><code>out-of-band</code></dt>
          <dd>
            In this mode, the client's traffic uses a control network separate
            from that managed by Open vSwitch, that is, Open vSwitch does not
            use any of its own network devices to communicate with the client.
            The control network must be configured separately, before or after
            <code>ovs-vswitchd</code> is started.
          </dd>
        </dl>

        <p>
          If not specified, the default is implementation-specific.
        </p>
      </column>
    </group>

    <group title="Client Failure Detection and Handling">
      <column name="max_backoff">
        Maximum number of milliseconds to wait between connection attempts.
        Default is implementation-specific.
      </column>

      <column name="inactivity_probe">
        Maximum number of milliseconds of idle time on connection to the client
        before sending an inactivity probe message.  If Open vSwitch does not
        communicate with the client for the specified number of seconds, it
        will send a probe.  If a response is not received for the same
        additional amount of time, Open vSwitch assumes the connection has been
        broken and attempts to reconnect.  Default is implementation-specific.
        A value of 0 disables inactivity probes.
      </column>
    </group>

    <group title="Other Features">
      <column name="external_ids">
        Key-value pairs for use by external frameworks that integrate with Open
        vSwitch, rather than by Open vSwitch itself.  System integrators should
        either use the Open vSwitch development mailing list to coordinate on
        common key-value definitions, or choose key names that are likely to be
        unique.  No common key-value pairs are currently defined.
      </column>
    </group>

    <group title="Status">
      <column name="is_connected">
        <code>true</code> if currently connected to this manager,
        <code>false</code> otherwise.
      </column>

      <column name="status">
        <p>Key-value pairs that report manager status.</p>
        <dl>
          <dt><code>last_error</code></dt>
          <dd>A human-readable description of the last error on the connection
            to the manager; i.e. <code>strerror(errno)</code>.  This key
            will exist only if an error has occurred.</dd>
        </dl>
        <dl>
          <dt><code>state</code></dt>
          <dd>The state of the connection to the manager.  Possible values
            are: <code>VOID</code> (connection is disabled),
            <code>BACKOFF</code> (attempting to reconnect at an increasing
            period), <code>CONNECTING</code> (attempting to connect),
            <code>ACTIVE</code> (connected, remote host responsive), and
            <code>IDLE</code> (remote host idle, sending keep-alive).  These
            values may change in the future.  They are provided only for human
            consumption.</dd>
        </dl>
        <dl>
          <dt><code>sec_since_connect</code></dt>
          <dd>The amount of time since this manager last successfully connected
            to the database (in seconds). Value is empty if manager has never
            successfully connected.</dd>
        </dl>
        <dl>
          <dt><code>sec_since_disconnect</code></dt>
          <dd>The amount of time since this manager last disconnected from the
            database (in seconds). Value is empty if manager has never
            disconnected.</dd>
        </dl>
      </column>
    </group>
  </table>

  <table name="NetFlow">
    A NetFlow target.  NetFlow is a protocol that exports a number of
    details about terminating IP flows, such as the principals involved
    and duration.

    <column name="targets">
      NetFlow targets in the form
      <code><var>ip</var>:<var>port</var></code>.  The <var>ip</var>
      must be specified numerically, not as a DNS name.
    </column>

    <column name="engine_id">
      Engine ID to use in NetFlow messages.  Defaults to datapath index
      if not specified.
    </column>

    <column name="engine_type">
      Engine type to use in NetFlow messages.  Defaults to datapath
      index if not specified.
    </column>

    <column name="active_timeout">
      The interval at which NetFlow records are sent for flows that are
      still active, in seconds.  A value of <code>0</code> requests the
      default timeout (currently 600 seconds); a value of <code>-1</code>
      disables active timeouts.
    </column>

    <column name="add_id_to_interface">
      <p>If this column's value is <code>false</code>, the ingress and egress
        interface fields of NetFlow flow records are derived from OpenFlow port
        numbers.  When it is <code>true</code>, the 7 most significant bits of
        these fields will be replaced by the least significant 7 bits of the
        engine id.  This is useful because many NetFlow collectors do not
        expect multiple switches to be sending messages from the same host, so
        they do not store the engine information which could be used to
        disambiguate the traffic.</p>
      <p>When this option is enabled, a maximum of 508 ports are supported.</p>
    </column>

    <column name="external_ids">
      Key-value pairs for use by external frameworks that integrate with Open
      vSwitch, rather than by Open vSwitch itself.  System integrators should
      either use the Open vSwitch development mailing list to coordinate on
      common key-value definitions, or choose key names that are likely to be
      unique.  No common key-value pairs are currently defined.
    </column>
  </table>

  <table name="SSL">
    SSL configuration for an Open_vSwitch.

    <column name="private_key">
      Name of a PEM file containing the private key used as the switch's
      identity for SSL connections to the controller.
    </column>

    <column name="certificate">
      Name of a PEM file containing a certificate, signed by the
      certificate authority (CA) used by the controller and manager,
      that certifies the switch's private key, identifying a trustworthy
      switch.
    </column>

    <column name="ca_cert">
      Name of a PEM file containing the CA certificate used to verify
      that the switch is connected to a trustworthy controller.
    </column>

    <column name="bootstrap_ca_cert">
      If set to <code>true</code>, then Open vSwitch will attempt to
      obtain the CA certificate from the controller on its first SSL
      connection and save it to the named PEM file. If it is successful,
      it will immediately drop the connection and reconnect, and from then
      on all SSL connections must be authenticated by a certificate signed
      by the CA certificate thus obtained.  <em>This option exposes the
        SSL connection to a man-in-the-middle attack obtaining the initial
        CA certificate.</em>  It may still be useful for bootstrapping.
    </column>

    <column name="external_ids">
      Key-value pairs for use by external frameworks that integrate with Open
      vSwitch, rather than by Open vSwitch itself.  System integrators should
      either use the Open vSwitch development mailing list to coordinate on
      common key-value definitions, or choose key names that are likely to be
      unique.  No common key-value pairs are currently defined.
    </column>
  </table>

  <table name="sFlow">
    <p>An sFlow(R) target.  sFlow is a protocol for remote monitoring
      of switches.</p>

    <column name="agent">
      Name of the network device whose IP address should be reported as the
      ``agent address'' to collectors.  If not specified, the IP address
      defaults to the <ref table="Controller" column="local_ip"/> in the
      collector's <ref table="Controller"/>.  If an agent IP address cannot be
      determined either way, sFlow is disabled.
    </column>

    <column name="header">
      Number of bytes of a sampled packet to send to the collector.
      If not specified, the default is 128 bytes.
    </column>

    <column name="polling">
      Polling rate in seconds to send port statistics to the collector.
      If not specified, defaults to 30 seconds.
    </column>

    <column name="sampling">
      Rate at which packets should be sampled and sent to the collector.
      If not specified, defaults to 400, which means one out of 400
      packets, on average, will be sent to the collector.
    </column>

    <column name="targets">
      sFlow targets in the form
      <code><var>ip</var>:<var>port</var></code>.
    </column>

    <column name="external_ids">
      Key-value pairs for use by external frameworks that integrate with Open
      vSwitch, rather than by Open vSwitch itself.  System integrators should
      either use the Open vSwitch development mailing list to coordinate on
      common key-value definitions, or choose key names that are likely to be
      unique.  No common key-value pairs are currently defined.
    </column>
  </table>

  <table name="Capability">
    <p>Records in this table describe functionality supported by the hardware
      and software platform on which this Open vSwitch is based.  Clients
      should not modify this table.</p>

    <p>A record in this table is meaningful only if it is referenced by the
      <ref table="Open_vSwitch" column="capabilities"/> column in the
      <ref table="Open_vSwitch"/> table.  The key used to reference it, called
      the record's ``category,'' determines the meanings of the
      <ref column="details"/> column.  The following general forms of
      categories are currently defined:</p>

    <dl>
      <dt><code>qos-<var>type</var></code></dt>
      <dd><var>type</var> is supported as the value for
        <ref column="type" table="QoS"/> in the <ref table="QoS"/> table.
      </dd>
    </dl>

    <column name="details">
      <p>Key-value pairs that describe capabilities.  The meaning of the pairs
      depends on the category key that the <ref table="Open_vSwitch"
      column="capabilities"/> column in the <ref table="Open_vSwitch"/> table
      uses to reference this record, as described above.</p>

      <p>The presence of a record for category <code>qos-<var>type</var></code>
          indicates that the switch supports <var>type</var> as the value of
          the <ref table="QoS" column="type"/> column in the <ref table="QoS"/>
          table.  The following key-value pairs are defined to further describe
          QoS capabilities:</p>

      <dl>
        <dt><code>n-queues</code></dt>
        <dd>Number of supported queues, as a positive integer.  Keys in the
          <ref table="QoS" column="queues"/> column for <ref table="QoS"/>
          records whose <ref table="QoS" column="type"/> value
          equals <var>type</var> must range between 0 and this value minus one,
          inclusive.</dd>
      </dl>
    </column>
  </table>
</database>

#!/usr/bin/env bash

# shamelessly based on libvirt's build script


if [ -z "$1" ]; then
    echo "usage: `basename $0` <ubuntu distribution>"
    exit 1
fi


set -e
set -o errexit
set -o pipefail

# Path to source tree
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
target=$DIR/../../

distribution=$(echo $1 | egrep -o '[a-z]*')
revision=$(git -C ${target} rev-parse --short HEAD)
epoch=$(date +%s)
upstream_version=$(grep AC_INIT ${target}/configure.ac | awk '{print $2}' | tr -d "[],")
debian_revision="${epoch}digitalocean~git+${revision}"
version=${upstream_version}-${debian_revision}

# Buildkite operates within a DETACHED HEAD state
# which breaks `git-buildpackage`. Force branch checkout.
if [ -n "$BUILDKITE" ]; then
        echo "--- Checking out ${BUILDKITE_BRANCH}@${BUILDKITE_COMMIT}"
        git checkout ${BUILDKITE_COMMIT}
        git checkout -b ${BUILDKITE_COMMIT}
fi

# If we're in a CI build, store the version for later use
if [ -n "$BUILDKITE" ]; then
    echo "--- Tagging release version at ${version}"
    buildkite-agent meta-data set "release-version" "${version}"
fi

# Package builder docker container
builder="quay.io/digitalocean/gbp:${distribution}"

echo "--- Pulling latest version of ${builder}"
docker pull ${builder}

echo "--- Building within ${builder} container"
declare -a env_options=("-e" "VERSION=${version}")

if [ -n "$DEB_BUILD_OPTIONS" ]; then
        env_options=(${env_options[@]} -e "DEB_BUILD_OPTIONS=${DEB_BUILD_OPTIONS}")
fi

if [ -n "$DOCKER_DEBUILD_OPTS" ]; then
        env_options=(${env_options[@]} -e "DOCKER_DEBUILD_OPTS=${DOCKER_DEBUILD_OPTS}")
fi

# build.log upload handled via automatic artifact uploading
echo "--- Building..."
IFS='%'
docker run --rm \
        -v ${target}:/target \
        ${env_options[@]} \
        -i -t ${builder} | tee build.log

unset IFS
if [ -n "$BUILDKITE" ]; then
        echo "--- Uploading artifacts"
        buildkite-agent artifact upload "debuild/*"
fi
